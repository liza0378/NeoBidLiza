@page "/myorders"
@using Microsoft.EntityFrameworkCore
@using NeoBid.Server.Auth
@using NeoBid.Server.Data
@using NeoBid.Server.Data.Entities
@using NeoBid.Server.Data.Helpers
@inject IDbContextFactory<ApplicationDbContext> dbFactory;
@inject AuthenticationService AuthenticationService;

<PageTitle>My Orders</PageTitle>

<section class="py-3 text-center container">
    <div class="row py-lg-3">
        <div class="col-lg-6 col-md-8 mx-auto">
            <h1 class="fw-light">My Orders</h1>
        </div>
    </div>
</section>

@if (!string.IsNullOrEmpty(_message))
{
    <div class="alert alert-danger" role="alert">
        @_message
    </div>
}


<div class="album py-5 bg-body-tertiary">
    <div class="container">
        <div class="row row-cols-1 row-cols-sm-2 row-cols-md-3 g-3">
            @if (_items is not null)
            {
                @foreach (var item in _items)
                {
                    <div class="col">
                        <div class="card shadow-sm">
                            <img src="data:image/jpeg;base64, @Convert.ToBase64String(item.Bid.Auction.Image)" class="bd-placeholder-img card-img-top" width="100%" height="225" />
                            <div class="card-body">
                                <h5 class="card-title">Auction: @item.Bid.Auction.Name</h5>
                                <p class="card-text">Address: @item.Address</p>
                                <p class="card-text">Created: @item.CreatedOn.ToLongDateString()</p>
                            </div>
                        </div>
                    </div>
                }
            }
            else
            {
                <div class="spinner-grow text-dark" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
            }
        </div>
    </div>
</div>

@code {
    private string _message;

    private List<Order> _items;

    private NeoBid.Server.Data.Entities.Account? _account;

    private async Task Refresh()
    {
        _message = string.Empty;
        try
        {
            _account = await AuthenticationService.GetCurrentAccount();

            _items = await OrderHelper.GetOrders(dbFactory, _account.Id);
        }
        catch (Exception ex)
        {
            _message = ex.Message;
        }
        InvokeAsync(StateHasChanged);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await Refresh();
        }
    }
}
