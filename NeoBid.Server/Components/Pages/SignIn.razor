@page "/signin"
@using NeoBid.Server.Auth
@inject AuthenticationService AuthenticationService;
@inject NavigationManager NavigationManager;

<PageTitle>Sign In</PageTitle>

<section class="py-5 text-center container">
    <div class="row py-lg-5">
        <div class="col-lg-6 col-md-8 mx-auto">
            <h1 class="fw-light">Sign In</h1>
        </div>
    </div>
</section>

<div class="album py-5 bg-body-tertiary">
    <div class="container">
        <div style="max-width: 400px;" class="m-auto">
            @if (!string.IsNullOrEmpty(_message))
            {
                <div class="alert alert-danger" role="alert">
                    @_message
                </div>
            }
            <div class="mb-3">
                <label class="form-label">Email address</label>
                <input type="email" class="form-control" placeholder="name@example.com" @bind-value=@_login>
            </div>
            <div class="mb-3">
                <label class="form-label">Password</label>
                <input type="password" class="form-control" @bind-value=@_password>
                <div class="form-text">
                    Your password must be 8-20 characters long, contain letters and numbers, and must not contain spaces, special characters, or emoji.
                </div>
            </div>
            <div class="d-flex justify-content-center align-items-center">

                <button type="button" class="btn btn-secondary m-auto d-block" @onclick=@(SignInClick)>Submit</button>
                <a type="button" class="btn my-custom-button m-auto d-block">Change password</a>
            </div>
        </div>
    </div>
</div>

@code {
    private string _login;
    private string _password;
    private string _message;

    private async Task SignInClick()
    {
        _message = string.Empty;

        try
        {
            if (!await AuthenticationService.SignIn(_login, _password))
            {
                _message = "Error. Try again...";
                return;
            }

            NavigationManager.NavigateTo("/account", true);
        }
        catch(Exception ex)
        {
            _message = ex.Message;
        }
    }
}
