@page "/mywins"
@using Microsoft.EntityFrameworkCore
@using NeoBid.Server.Auth
@using NeoBid.Server.Data
@using NeoBid.Server.Data.Entities
@using NeoBid.Server.Data.Enums
@using NeoBid.Server.Data.Helpers
@inject IDbContextFactory<ApplicationDbContext> dbFactory;
@inject AuthenticationService AuthenticationService;
@inject NavigationManager NavigationManager;

<PageTitle>My Wins</PageTitle>

<section class="py-3 text-center containerr">
    <div class="row py-lg-3">
        <div class="col-lg-6 col-md-8 mx-auto">
            <h1 class="fw-light">My Wins</h1>
        </div>
    </div>
</section>

<div class="album py-5 bg-body-tertiary">
    <div class="container">
        @if(_chosenBid.HasValue)
        {
            <div class="row">
                <div class="col-12 p-4">
                    <h4>@_chosenBid.Value.Auction.Name</h4>
                    <div class="mb-3">
                        <label class="form-label">Address</label>
                        <input type="text" class="form-control" @bind-value=@_address>
                        <div class="form-text">
                            Address of delivery. The payment will be processed after delivery.
                        </div>
                    </div>
                    <div class="d-flex justify-content-center align-items-center">
                        <button type="button" class="btn btn-secondary m-auto d-block" @onclick=@(CreateOrder)>Submit</button>
                    </div>
                </div>
            </div>
        }
        
        <div class="row row-cols-1 row-cols-sm-2 row-cols-md-3 g-3">
            @if (!string.IsNullOrEmpty(_message))
            {
                <div class="alert alert-danger" role="alert">
                    @_message
                </div>
            }
            @if (_items is not null)
            {
                @foreach (var item in _items)
                {
                    <div class="col">
                        <div class="card shadow-sm">
                            <img src="data:image/jpeg;base64, @Convert.ToBase64String(item.Auction.Image)" class="bd-placeholder-img card-img-top" width="100%" height="225" />
                            <div class="card-body">
                                <h5 class="card-title">@item.Auction.Name</h5>
                                <p class="card-text">@item.Auction.Description</p>
                                <div class="d-flex justify-content-between align-items-center">


                                    <small class="text-body-secondary">@item.Auction.CreatedOn.ToString() - @item.Auction.EndsOn.ToString()</small>
                                </div>

                                @if (item.Bid.Order is null)
                                {
                                    <button class="btn btn-primary m-auto d-block" @onclick=@(()=>_chosenBid = item)>Buy</button>
                                }

                            </div>
                        </div>
                    </div>
                }
            }
            else
            {
                <div class="spinner-grow text-dark" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
            }
        </div>
    </div>
</div>

@code {
    private List<(Auction Auction, Bid Bid)> _items;

    private string _message;

    private (Auction Auction, Bid Bid)? _chosenBid;

    private string _address;

    private async Task CreateOrder()
    {
        _message = string.Empty;
        try
        {
            await OrderHelper.CreateOrder(dbFactory, _chosenBid.Value.Bid.Id, _address);

            _chosenBid = null;

            await Refresh();
        }
        catch(Exception ex)
        {
            _message = ex.Message;
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await Refresh();
        }
    }

    private async Task Refresh()
    {
        _message = string.Empty;
        try
        {
            var account = await AuthenticationService.GetCurrentAccount();

            _items = await AuctionHelper.GetAuctionsByHighestBidder(dbFactory, account.Id);
        }
        catch (Exception ex)
        {
            _message = ex.Message;
        }

        InvokeAsync(StateHasChanged);
    }
}
